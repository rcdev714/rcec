name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  # Lint and Type Check
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npx tsc --noEmit

      - name: Check environment variables structure
        run: node scripts/test-env.js
        env:
          CI: true

  # Security and Dependency Checks
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: |
          echo "=== Running security audit ==="
          npm audit --audit-level high || echo "‚ö†Ô∏è  Security vulnerabilities found - continuing with audit-ci config"

      - name: Check for vulnerable dependencies with audit-ci
        run: |
          echo "=== Running audit-ci with allowlist ==="
          npx audit-ci --config audit-ci.json

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 1

  # Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          CI: true
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
          NODE_ENV: test


  # Deploy to Staging (PR)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.event_name == 'pull_request'
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway Staging
        id: deploy
        run: |
          # Login to Railway using token (pipe to stdin)
          echo "${{ secrets.RAILWAY_TOKEN }}" | railway login
          # Deploy using service name instead of project ID
          railway up --service=${{ secrets.RAILWAY_SERVICE_NAME || 'web' }}
          # Wait for deployment to stabilize
          sleep 15
          # Get deployment URL
          url=$(railway status --json | jq -r '.deployments[0].url // ""')
          if [ -z "$url" ]; then
            url="https://${{ secrets.RAILWAY_DOMAIN || 'your-app.railway.app' }}"
          fi
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment..."
          sleep 30

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Staging deployment ready!**\n\nüìç **Preview URL:** ${{ steps.deploy.outputs.url }}\n\n‚úÖ All checks passed - ready for review!`
            })

  # Deploy to Production (main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway Production
        id: deploy-prod
        run: |
          echo "${{ secrets.RAILWAY_TOKEN }}" | railway login
          railway up --service=${{ secrets.RAILWAY_SERVICE_NAME || 'web' }}
          echo "‚úÖ Production deployment completed"
